version: '3'
services:

  #App - Laravel PHP
  app:
    build:
      context: .
      dockerfile: app.dockerfile
    #image: digitalocean.com/php
    container_name: gotcha-app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      DB_HOST: database
      working_dir: /var/www
    ports:
      - "8088:80"
    expose:
      - 9000
    volumes:
      - ./:/var/www
    networks:
      - gotcha-network

  #Nginx Service
  webserver:
    build:
      context: .
      dockerfile: web.dockerfile
    container_name: gotcha-web
    restart: unless-stopped
    tty: true
    ports:
      - "8181:80"
      - "8443:443"
    volumes:
      - ./:/var/www
    networks:
      - gotcha-network

  # diagnostic mail server
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "8025:8025"
    expose:
      - 1025
    networks:
      - gotcha-network

  # F# Game engine
  engine:
    image: elicio/gotcha-core:path_enhancements
    container_name: gotcha-engine
    links:
      - eventstore
    ports:
      - "8080:8080"
    environment:
      EVENTSTORE_SERVICE_HOST: eventstore
    networks:
      - gotcha-network

  # Storage for game engine
  eventstore:
    image: eventstore/eventstore:latest
    container_name: gotcha-events
    ports:
      - "2113:2113"
      - "1113:1113"
    volumes:
      - eventContent:/usr/share/eventstore
      - eventConfiguration:/etc/eventstore/
      - eventData:/var/lib/eventstore
      - eventApplicationLogs:/var/log/eventstore
    networks:
      - gotcha-network

  # Postgres 12
  database:
    image: postgres:12
    container_name: gotcha-postgres
    restart: unless-stopped
    tty: true
    volumes:
       - dbdata:/var/lib/postgresql/data
    environment:
      - "POSTGRES_DB=gotcha"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=secret"
      - "POSTGRES_ROOT_PASSWORD=secret"
      - "LC_ALL=C.UTF-8"
    ports:
        - "5432:5432"
    networks:
      - gotcha-network

  # zoo1:
  #   image: zookeeper:3.4.9
  #   hostname: zoo1
  #   ports:
  #     - "2181:2181"
  #   environment:
  #       ZOO_MY_ID: 1
  #       ZOO_PORT: 2181
  #       ZOO_SERVERS: server.1=zoo1:2888:3888
  #   volumes:
  #     - ./zk-single-kafka-single/zoo1/data:/data
  #     - ./zk-single-kafka-single/zoo1/datalog:/datalog
  #   networks:
  #     - gotcha-network

  # kafka1:
  #   image: confluentinc/cp-kafka:5.3.1
  #   hostname: kafka1
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - ./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
  #   depends_on:
  #     - zoo1
  #   networks:
  #     - gotcha-network

#Docker Networks
networks:
  gotcha-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
  eventContent:
    driver: local
  eventConfiguration:
    driver: local
  eventData:
    driver: local
  eventApplicationLogs:
    driver: local